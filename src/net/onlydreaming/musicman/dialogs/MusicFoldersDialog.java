/*
 * MusicManApp.java
 * Part of the MusicMan application by Ian Renton.  For information, please visit:
 * http://www.onlydreaming.net/software/musicman
 * This code is licenced under the GNU GPL v3 (http://www.gnu.org/licenses/).
 */
package net.onlydreaming.musicman.dialogs;

import net.onlydreaming.musicman.*;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 * A dialog for users to enter the paths to their music folders.  Text-entry
 * only for now.
 */
public class MusicFoldersDialog extends javax.swing.JDialog {

    private final MusicManApp app;
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;

    /** Creates new form MusicFoldersDialog */
    public MusicFoldersDialog(java.awt.Frame parent, MusicManApp app, ArrayList<File> folders) {
        super(parent, false);

        this.app = app;

        initComponents();
        String text = "";
        for (File path : folders) {
            text = text + path.getAbsolutePath() + "\r\n";
        }
        if (text.length() > 2) text = text.substring(0, text.length()-2); // strip final CRLF
        textArea.setText(text);
        this.setVisible(true);
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        javax.swing.JLabel label = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setMinimumSize(new java.awt.Dimension(392, 258));
        setName("MusicFoldersDialog"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(net.onlydreaming.musicman.MusicManApp.class).getContext().getResourceMap(MusicFoldersDialog.class);
        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        label.setText(resourceMap.getString("label.text")); // NOI18N
        label.setName("label"); // NOI18N

        scrollPane.setName("scrollPane"); // NOI18N

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setName("textArea"); // NOI18N
        scrollPane.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    /**
     * Jobs to do on close.  If the return status was OK, parse the contents of
     * the text field into a set of dirs, then update the dirs list in the main
     * app.
     * @param retStatus
     */
    private void doClose(int retStatus) {
        returnStatus = retStatus;

        if (returnStatus == RET_OK) {
            String[] dirs = textArea.getText().split("\r\n|\r|\n");
            ArrayList<File> libraryDirs = new ArrayList<File>();
            for (String dir : dirs) {
                if (!dir.equals("")) {
                    File file = new File(dir);
                    if (!file.exists()) {
                        JOptionPane.showMessageDialog(this, dir + "\nFolder does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    } else {
                        libraryDirs.add(file);
                    }
                }
            }
            app.updateDirs(libraryDirs);
            // Commented out, this is just too much text for users to read!
            /*JOptionPane.showMessageDialog(this, "Thank you.  Your chosen directories will now be scanned for music\n" +
                                                "files.  This may take a few minutes if you have a lot of files.\n" +
                                                "This only needs to be done once - in future, MusicMan will just\n" +
                                                "check for changes, which will be quicker.\n" +
                                                "Once files appear in the main display, MusicMan is ready to use.\n" +
                                                "It will load ID3 tags for your files in the background while you\n" +
                                                "are using the app.  ID3 tags are saved with your library, so this\n" +
                                                "job will also only have to be done once.", "Library Scanning", JOptionPane.INFORMATION_MESSAGE);*/
        }

        setVisible(false);
        dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
}
